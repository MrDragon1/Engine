#pragma once

layout(std140, binding = 0) uniform Camera
{
    mat4 ViewProjectionMatrix;
    mat4 InverseViewProjectionMatrix;
    mat4 ProjectionMatrix;
    mat4 InverseProjectionMatrix;
    mat4 ViewMatrix;
    mat4 InverseViewMatrix;
    vec2 NDCToViewMul;
    vec2 NDCToViewAdd;
    vec2 DepthUnpackConsts;
    vec2 CameraTanHalfFOV;
} u_Camera;

layout (std140, binding = 1) uniform ShadowData
{
    mat4 DirLightMatrices[4];
} u_DirShadow;

struct DirectionalLight
{
    vec3 Direction;
    float ShadowAmount;
    vec3 Radiance;
    float Multiplier;
};

layout(std140, binding = 2) uniform SceneData
{
    DirectionalLight DirectionalLights;
    vec3 CameraPosition; // Offset = 32
    float EnvironmentMapIntensity;
} u_Scene;

layout(std140, binding = 3) uniform RendererData
{
    uniform vec4 CascadeSplits;
    uniform int TilesCountX;
    uniform bool ShowCascades;
    uniform bool SoftShadows;
    uniform float LightSize;
    uniform float MaxShadowDistance;
    uniform float ShadowFade;
    uniform bool CascadeFading;
    uniform float CascadeTransitionFade;
    uniform bool ShowLightComplexity;
} u_RendererData;

