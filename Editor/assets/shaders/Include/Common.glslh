layout(std140, binding = 0) uniform Camera
{
    mat4 ViewProjectionMatrix;
    mat4 InverseViewProjectionMatrix;
    mat4 ProjectionMatrix;
    mat4 InverseProjectionMatrix;
    mat4 ViewMatrix;
    mat4 InverseViewMatrix;
    float FarPlane;
    float NearPlane;
} u_Camera;

layout (std140, binding = 1) uniform ShadowData
{
    int CascadeCount;
    float CascadeSplits[16];
    mat4 DirLightMatrices[16];
} u_CascadeShadowData;

struct DirectionalLight
{
    vec3 Direction;
    float ShadowAmount;
    vec3 Radiance;
    float Multiplier;
};

layout(std140, binding = 2) uniform SceneData
{
    DirectionalLight DirectionalLights;
    vec3 CameraPosition; // Offset = 32
    float EnvironmentMapIntensity;
    vec4 ScissorNormalized;
} u_Scene;

layout(std140, binding = 3) uniform RendererData
{
    int EntityID;
} u_RendererData;

layout(std140, binding = 4) uniform material{
    vec4 u_Albedo;
    float u_Metallic;
    float u_Roughness;
    float u_Occlusion;
    float u_Emisstion;
    int u_UseMap; // 1<<1: Albedo 1<<2: Normal 1<<3: Metallic 1<<4: Roughness 1<<5: Occlusion
}u_Material;